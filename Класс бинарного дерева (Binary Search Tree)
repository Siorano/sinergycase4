#include <gtest/gtest.h>

// Простой класс бинарного дерева для тестов
class BinaryTree {
public:
    struct Node {
        int data;
        Node* left;
        Node* right;
        Node(int val) : data(val), left(nullptr), right(nullptr) {}
    };
    
    Node* root;

    BinaryTree() : root(nullptr) {}

    void push(int value) {
        root = insert(root, value);
    }

    void pop(int value) {
        root = deleteNode(root, value);
    }

    bool search(int value) {
        return find(root, value);
    }

private:
    Node* insert(Node* node, int value) {
        if (!node) return new Node(value);
        if (value < node->data) node->left = insert(node->left, value);
        else node->right = insert(node->right, value);
        return node;
    }

    Node* deleteNode(Node* root, int key) {
        if (!root) return root;
        if (key < root->data) root->left = deleteNode(root->left, key);
        else if (key > root->data) root->right = deleteNode(root->right, key);
        else {
            if (!root->left) return root->right;
            else if (!root->right) return root->left;
            root->data = minValue(root->right);
            root->right = deleteNode(root->right, root->data);
        }
        return root;
    }

    int minValue(Node* node) {
        int minVal = node->data;
        while (node->left) {
            minVal = node->left->data;
            node = node->left;
        }
        return minVal;
    }

    bool find(Node* node, int value) {
        if (!node) return false;
        if (node->data == value) return true;
        if (value < node->data) return find(node->left, value);
        return find(node->right, value);
    }
};

// Интерфейс теста для бинарного дерева
class BinaryTreeTest : public ::testing::Test {
protected:
    BinaryTree tree;

    void SetUp() override {
        // Инициализация дерева перед каждым тестом
    }

    void TearDown() override {
        // Очистка после теста
    }
};

// Тест для функции push
TEST_F(BinaryTreeTest, PushTest) {
    tree.push(10);
    tree.push(5);
    tree.push(15);
    EXPECT_TRUE(tree.search(10));  // Проверка, что 10 находится в дереве
    EXPECT_TRUE(tree.search(5));   // Проверка, что 5 находится в дереве
    EXPECT_TRUE(tree.search(15));  // Проверка, что 15 находится в дереве
}

// Тест для функции pop
TEST_F(BinaryTreeTest, PopTest) {
    tree.push(10);
    tree.push(5);
    tree.push(15);
    tree.pop(5);
    EXPECT_FALSE(tree.search(5));  // Проверка, что 5 удалено из дерева
}

// Тест для функции search
TEST_F(BinaryTreeTest, SearchTest) {
    tree.push(10);
    tree.push(5);
    tree.push(15);
    EXPECT_TRUE(tree.search(10));  // Проверка, что 10 находится в дереве
    EXPECT_FALSE(tree.search(20)); // Проверка, что 20 не найдено в дереве
}
